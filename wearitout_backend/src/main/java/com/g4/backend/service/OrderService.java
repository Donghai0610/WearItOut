package com.g4.backend.service;

import com.g4.backend.dto.request.OrderRequestDTO;
import com.g4.backend.dto.response.NewOrderResponseDTO;
import com.g4.backend.dto.response.OrderDetailResponseDTO;
import com.g4.backend.dto.response.OrderResponseDTO;
import com.g4.backend.mapper.OrderMapper;
import com.g4.backend.model.*;

import com.g4.backend.model.key.KeyOrderShipping;
import com.g4.backend.repository.*;
import com.g4.backend.utils.PaymentMethod;
import jakarta.persistence.EntityNotFoundException;
import lombok.AllArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import vn.payos.PayOS;
import vn.payos.type.CheckoutResponseData;
import vn.payos.type.PaymentData;
import vn.payos.type.PaymentLinkData;
import vn.payos.type.WebhookData;

import java.util.*;
import java.util.stream.Collectors;

@Service
public class OrderService {

    @Value("${PAYOS_CLIENT_ID}")
    private String clientId;
    @Value("${PAYOS_API_KEY}")
    private String apiKey;
    @Value("${PAYOS_CHECKSUM_KEY}")
    private String checksumKey;

    private final OrderRepository orderRepository;
    private final OrderMapper orderMapper;
    private final CartItemRepository cartItemRepository;
    private final ProductRepository productRepository;
    private final CartRepository cartRepository;
    private final UserRepository userRepository;
    private final ShopRepositoryAdmin shopRepository;
    private final OrderDetailRepository orderDetailRepository;
    private final OrderSettingRepository orderSettingRepository;
    private final SettingRepository settingRepository;

    @Autowired
    public OrderService(OrderRepository orderRepository, OrderMapper orderMapper, CartItemRepository cartItemRepository, ProductRepository productRepository, CartRepository cartRepository, UserRepository userRepository, ShopRepositoryAdmin shopRepository, OrderDetailRepository orderDetailRepository, OrderSettingRepository orderSettingRepository, SettingRepository settingRepository) {
        this.orderRepository = orderRepository;
        this.orderMapper = orderMapper;
        this.cartItemRepository = cartItemRepository;
        this.productRepository = productRepository;
        this.cartRepository = cartRepository;
        this.userRepository = userRepository;
        this.shopRepository = shopRepository;
        this.orderDetailRepository = orderDetailRepository;
        this.orderSettingRepository = orderSettingRepository;
        this.settingRepository = settingRepository;
    }

    public Page<OrderResponseDTO> getOrderByShop(long shopId, String searchKeyword, String paymentStatus, String shippingStatus, int page, int size) {
//        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
//        Object principal = authentication.getPrincipal();
//
//        String username;
//        if (principal instanceof UserDetails) {
//            username = ((UserDetails) principal).getUsername();
//        } else {
//            username = principal.toString();
//        }

        Pageable pageable = PageRequest.of(page, size);
        Page<OrderResponseDTO> orders = orderRepository.getOrdersByShopAndFilter(shopId, searchKeyword, paymentStatus, shippingStatus, pageable);
        return orders;
    }

    public Page<OrderResponseDTO> getOrderByUser(String paymentStatus, String shippingStatus, int page, int size) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        Object principal = authentication.getPrincipal();

        String username;
        if (principal instanceof UserDetails) {
            username = ((UserDetails) principal).getUsername();
        } else {
            username = principal.toString();
        }

        Pageable pageable = PageRequest.of(page, size);
        Page<OrderResponseDTO> orders = orderRepository.getOrdersByUserAndFilter(username, paymentStatus, shippingStatus, pageable);
        return orders;
    }

    public void cancelOrder(long orderId) {
        Optional<Order> orderOptional = orderRepository.findById(orderId);
        if (orderOptional.isPresent()) {
            Order order = orderOptional.get();
            order.setPaymentStatus("CANCEL");
            orderRepository.save(order);
        }
    }

    public void changeStatusOrderToPaid(long orderId) {
        Optional<Order> orderOptional = orderRepository.findById(orderId);
        if (orderOptional.isPresent()) {
            Order order = orderOptional.get();
            order.setPaymentStatus("PAID");
            orderRepository.save(order);
        }
    }

    public Order getOrderById(long orderId) {
        Optional<Order> orderOptional = orderRepository.findById(orderId);
        return unwarppedOrder(orderOptional, orderId);
    }

    static Order unwarppedOrder(Optional<Order> entity, Long id) {
        if (entity.isPresent()) {
            return entity.get();
        } else {
            throw new EntityNotFoundException("Order with ID " + id + " not found");
        }
    }





















    


    public void createOrdersForCart(Long userId, String shipAddress, PaymentMethod paymentMethod) {
        // L·∫•y ng∆∞·ªùi d√πng
        User user = userRepository.findById(userId).orElseThrow(() -> new RuntimeException("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i"));

        // L·∫•y gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng
        Cart cart = cartRepository.findByUser(user);
        if (cart == null) {
            throw new RuntimeException("Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i cho ng∆∞·ªùi d√πng: " + userId);
        }

        // L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m trong gi·ªè h√†ng
        List<CartItem> cartItems = cartItemRepository.findByCart(cart);
        if (cartItems.isEmpty()) {
            throw new RuntimeException("Gi·ªè h√†ng tr·ªëng cho ng∆∞·ªùi d√πng: " + userId);
        }

        // T√≠nh t·ªïng ti·ªÅn c·ªßa gi·ªè h√†ng (to√†n b·ªô ƒë∆°n h√†ng ban ƒë·∫ßu)
        double totalPaymentForWebsite = cartItems.stream()
                .mapToDouble(CartItem::getTotalPrice)
                .sum();

        // Nh√≥m c√°c s·∫£n ph·∫©m trong gi·ªè h√†ng theo shop_id
        Map<Long, List<CartItem>> groupedByShop = cartItems.stream()
                .collect(Collectors.groupingBy(cartItem -> cartItem.getProduct().getShop().getShopId()));

        List<Order> orders = new ArrayList<>();

        // T·∫°o ƒë∆°n h√†ng cho t·ª´ng c·ª≠a h√†ng
        for (Long shopId : groupedByShop.keySet()) {
            List<CartItem> itemsForShop = groupedByShop.get(shopId);
            double totalPriceForShop = itemsForShop.stream()
                    .mapToDouble(CartItem::getTotalPrice)
                    .sum();
            int totalQuantityForShop = itemsForShop.stream()
                    .mapToInt(CartItem::getQuantity)
                    .sum();

            // T·∫°o ƒë∆°n h√†ng cho c·ª≠a h√†ng
            Order order = createOrderForShop(userId, shipAddress, paymentMethod, totalPriceForShop, totalQuantityForShop, itemsForShop, shopId);
            orders.add(order);

            // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong Product v√† x√≥a CartItem
            updateProductQuantityAndClearCartItems(itemsForShop);

            if (paymentMethod == PaymentMethod.TRANSFER_TO_SHOP_AUTOMATIC) {
                PaymentData paymentData = createPaymentDataForOrder(order, totalPaymentForWebsite);
                // T·∫°o Payment Link t·ª´ PayOS
                CheckoutResponseData paymentLinkResponse = createPaymentLink(paymentData);

                // L∆∞u th√¥ng tin thanh to√°n v√†o Order
                savePaymentLinkInfoForWebsite(order, paymentLinkResponse);
            }
        }

        // L∆∞u c√°c ƒë∆°n h√†ng cho c√°c c·ª≠a h√†ng
        for (Order order : orders) {
            orderRepository.save(order);
        }
    }


    @Transactional
    protected void updateProductQuantityAndClearCartItems(List<CartItem> itemsForShop) {
        Set<Cart> cartsToDelete = new HashSet<>(); // T·∫≠p h·ª£p c√°c cart c·∫ßn ki·ªÉm tra

        for (CartItem cartItem : itemsForShop) {
            // üîπ Tr·ª´ s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong Product
            Product product = cartItem.getProduct();
            int quantitySold = cartItem.getQuantity();
            product.setStockQuantity(product.getStockQuantity() - quantitySold);
            productRepository.save(product);

            // üîπ L∆∞u l·∫°i Cart ƒë·ªÉ ki·ªÉm tra sau khi x√≥a
            Cart cart = cartItem.getCart();
            cartsToDelete.add(cart);

            System.out.println("X√≥a CartItem c√≥ ID: " + cartItem.getCartItemId());
            cartItemRepository.delete(cartItem); // X√≥a CartItem
            cartItemRepository.flush(); // ƒê·∫£m b·∫£o d·ªØ li·ªáu ƒë∆∞·ª£c x√≥a ngay l·∫≠p t·ª©c
        }

        for (Cart cart : cartsToDelete) {
            long remainingItems = cartItemRepository.countByCart(cart); // ƒê·∫øm s·ªë CartItem c√≤n l·∫°i
            System.out.println("Cart ID: " + cart.getCartId() + " c√≤n l·∫°i " + remainingItems + " s·∫£n ph·∫©m.");
            if (remainingItems == 0) {
                cartRepository.delete(cart); // üî• Ch·ªâ x√≥a Cart n·∫øu kh√¥ng c√≤n CartItem
                System.out.println("Cart ID: " + cart.getCartId() + " ƒë√£ b·ªã x√≥a.");
            } else {
                System.out.println("Cart ID: " + cart.getCartId() + " v·∫´n c√≤n s·∫£n ph·∫©m, kh√¥ng x√≥a.");
            }
        }
    }

    private Order createOrderForShop(Long userId, String shipAddress, PaymentMethod paymentMethod, double totalPriceForShop, int totalQuantityForShop, List<CartItem> itemsForShop, Long shopId) {
        // L·∫•y ng∆∞·ªùi d√πng v√† c·ª≠a h√†ng
        User user = userRepository.findById(userId).orElseThrow(() -> new RuntimeException("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i"));
        Shop shop = shopRepository.findById(shopId).orElseThrow(() -> new RuntimeException("C·ª≠a h√†ng kh√¥ng t·ªìn t·∫°i"));

        // T·∫°o ƒë∆°n h√†ng cho c·ª≠a h√†ng
        Order order = new Order();
        order.setUser(user);
        order.setShop(shop);
        order.setShipAddress(shipAddress);
        order.setPaymentMethod(paymentMethod);
        order.setTotalPrice(totalPriceForShop);
        order.setTotalQuantity(totalQuantityForShop);  // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ªïng cho ƒë∆°n h√†ng
        order.setPaymentStatus("UNPAID");  // ƒê·∫∑t payment_status l√† UNPAID khi t·∫°o ƒë∆°n h√†ng
        order = orderRepository.save(order);

        // 2. T·∫°o OrderSetting v·ªõi tr·∫°ng th√°i "Processed"
        OrderSetting orderSetting = new OrderSetting();
        Setting setting = settingRepository.findById(16)
                .orElseThrow(() -> new RuntimeException("Setting kh√¥ng t·ªìn t·∫°i"));

        // 3. Sau khi l∆∞u Order, orderId ƒë√£ ƒë∆∞·ª£c g√°n -> B√¢y gi·ªù set key cho OrderSetting
        orderSetting.setOrder(order);
        orderSetting.setSetting(setting);
        orderSetting.setKeyOrderSetting(new KeyOrderShipping(order.getOrderId(), setting.getSettingId())); // ƒê·∫£m b·∫£o orderId kh√¥ng null

        // 4. Th√™m OrderSetting v√†o danh s√°ch v√† l∆∞u v√†o database
        orderSettingRepository.save(orderSetting);

        // Kh·ªüi t·∫°o danh s√°ch orderDetails n·∫øu ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o
        if (order.getOrderDetails() == null) {
            order.setOrderDetails(new ArrayList<>());
        }

        // T·∫°o chi ti·∫øt ƒë∆°n h√†ng cho c√°c s·∫£n ph·∫©m c·ªßa c·ª≠a h√†ng
        for (CartItem cartItem : itemsForShop) {
            Product product = cartItem.getProduct();
            OrderDetail orderDetail = new OrderDetail();
            orderDetail.setOrder(order);
            orderDetail.setProduct(product);
            orderDetail.setQuantity(cartItem.getQuantity());

            // Th√™m OrderDetail v√†o danh s√°ch
            order.getOrderDetails().add(orderDetail);
        }

        return order;
    }

    private PaymentData createPaymentDataForOrder(Order order, double totalPaymentForWebsite) {
        // T·∫°o PaymentData v·ªõi th√¥ng tin ƒë∆°n h√†ng
        return PaymentData.builder()
                .orderCode(order.getOrderId())
                .amount((int) totalPaymentForWebsite)  // S·ª≠ d·ª•ng totalPaymentForWebsite l√†m s·ªë ti·ªÅn thanh to√°n cho website
                .description("Thanh to√°n cho ƒë∆°n h√†ng")
                .build();
    }


    private void savePaymentLinkInfoForWebsite(Order order, CheckoutResponseData paymentLinkResponse) {
        order.setPaymentLinkUrl(paymentLinkResponse.getCheckoutUrl());
        orderRepository.save(order);
    }

    private CheckoutResponseData createPaymentLink(PaymentData paymentData) {
        try {
            PayOS payOS = new PayOS(clientId, apiKey, checksumKey);
            return payOS.createPaymentLink(paymentData);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }


}
